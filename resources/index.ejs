<!doctype html>
<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" />
	<meta name="apple-mobile-web-app-capable" content="yes">
	<meta name="apple-mobile-web-app-status-bar-style" content="black">
	<meta name="format-detection" content="telephone=no">

	<meta name="mobile-web-app-capable" content="yes">
	<link rel="manifest" id="manifest-placeholder">

	<title>AirDC++ Web Client</title>
</head>

<body>
	<!-- content section -->
	<section class="ui dimmable blurring minimal" id="container-main"></section>
	
	<!-- common dimmer node for Semantic UI modals -->
	<div id="modals-node" class="ui dimmer modals-node"></div>
	<div id="confirms-node" class="ui dimmer confirms-node"></div>
	<div id="notifications-node"></div>
	
	<script type="text/javascript">
		function getBasePath(data) {
			const pathTokens = window.location.pathname.split('/');		
			
			// All basenames must used a fixed prefix because of URL routing
			if (pathTokens.length > 1 && pathTokens[1].indexOf('airdcpp') === 0) {		
				return '/' + pathTokens[1] + '/';		
			}		
			
			return '/';		
		}

		// We must inject the main chunk dynamically as well because the final path is not known on compile time
		var script = document.createElement('script');
		script.src = getBasePath() + "<%= htmlWebpackPlugin.files.chunks.main.entry%>";
		document.body.appendChild(script);

		// App manifest (must be added here)
		// https://developer.mozilla.org/en-US/docs/Web/Manifest
		const baseUrl = window.location.origin + getBasePath();
		const manifest = {
			'name': 'AirDC++',
			'short_name': 'AirDC++',
			'description': 'AirDC++ Web Client',
			'start_url': baseUrl,
			'display': 'standalone',
			'background_color': '#000000',
			'theme_color': '#000000',
			'icons': [
			{
					'src': baseUrl + "<%=require('./images/pwa/AirDCPlusPlus_192.png')%>",
					'sizes': '192x192',
					'type': 'image/png'
				}, {
					'src': baseUrl + "<%=require('./images/pwa/AirDCPlusPlus_512.png')%>",
					'sizes': '512x512',
					'type': 'image/png'
				}
			]
		};

		const stringManifest = JSON.stringify(manifest);
		const blob = new Blob([stringManifest], { type: 'application/json' });
		const manifestURL = URL.createObjectURL(blob);
		document.querySelector('#manifest-placeholder').setAttribute('href', manifestURL);
	</script>
	
	<% if (htmlWebpackPlugin.options.googleAnalytics) { %>
		<script>
			(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
			(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
			m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
			})(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

			ga('create', 'UA-77192807-2', 'auto');
			ga('send', 'pageview');

		</script>
	<% } %>

</body>
</html>
